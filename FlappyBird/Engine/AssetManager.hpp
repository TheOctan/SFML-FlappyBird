#pragma once

#ifndef ENGINE_ASSET_MANAGER_HPP
#define ENGINE_ASSET_MANAGER_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include<map>
#include<SFML\Graphics.hpp>

namespace Engine
{
	// Create typedefs for map of texture and font like stores
	typedef std::map<std::string, sf::Image>	ImageStore;
	typedef std::map<std::string, sf::Texture>	TextureStore;
	typedef std::map<std::string, sf::Font>		FontStore;
	
	////////////////////////////////////////////////////////////
	/// \brief StateMachine stores in itself states
	/// and assigns the actie module of the programm
	///
	////////////////////////////////////////////////////////////
	class AssetManager
	{
	public:

		////////////////////////////////////////////////////////////
		/// \brief Default constructor
		///
		////////////////////////////////////////////////////////////
		AssetManager();

		////////////////////////////////////////////////////////////
		/// \brief Destructor
		///
		////////////////////////////////////////////////////////////
		~AssetManager();

		////////////////////////////////////////////////////////////
		/// \brief Load the image from a file on disk
		///
		/// \param name			Name of resourse
		/// \param fileName		Path to the file
		///
		////////////////////////////////////////////////////////////
		void LoadImage(std::string name, std::string fileName);

		////////////////////////////////////////////////////////////
		/// \brief Get the image from storage
		///
		/// \param name			Name of resourse
		/// \return						Texture
		///
		////////////////////////////////////////////////////////////
		sf::Image& GetImage(std::string name);

		////////////////////////////////////////////////////////////
		/// \brief Load the texture from a file on disk
		///
		/// \param name			Name of resourse
		/// \param fileName		Path to the file
		///
		////////////////////////////////////////////////////////////
		void LoadTexture(std::string name, std::string fileName);

		////////////////////////////////////////////////////////////
		/// \brief Get the teture from storage
		///
		/// \param name			Name of resourse
		/// \return						Texture
		///
		////////////////////////////////////////////////////////////
		sf::Texture& GetTexture(std::string name);


		////////////////////////////////////////////////////////////
		/// \brief Load the font from a file on disk
		///
		/// \param name			Name of resourse
		/// \param fileName		Path to the file
		///
		////////////////////////////////////////////////////////////
		void LoadFont(std::string name, std::string fileName);

		////////////////////////////////////////////////////////////
		/// \brief Get the font from storage
		///
		/// \param name			Name of resourse
		/// \return						Font
		///
		////////////////////////////////////////////////////////////
		sf::Font& GetFont(std::string name);

	private:

		////////////////////////////////////////////////////////////
		// Member data
		////////////////////////////////////////////////////////////
		ImageStore		_images;		//Storage container of images
		TextureStore	_textures;		//Storage container of textures
		FontStore		_fonts;			//Storage container of fonts
	};

} // namespace Engine

#endif // !ENGINE_ASSET_MANAGER_HPP


