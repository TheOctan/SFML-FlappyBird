#pragma once

#ifndef ENGINE_STATE_MACHINE_HPP
#define ENGINE_STATE_MACHINE_HPP

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include<memory>
#include<stack>

#include"../State.hpp"

namespace Engine
{
	// Create typedef for unique pointer of state like StateRef
	typedef std::unique_ptr<State> StateRef;

	////////////////////////////////////////////////////////////
	/// \brief StateMachine stores in itself states
	/// and assigns the actie module of the programm
	///
	////////////////////////////////////////////////////////////
	class StateMachine
	{
	public:

		////////////////////////////////////////////////////////////
		/// \brief Default constructor
		///
		////////////////////////////////////////////////////////////
		StateMachine();

		////////////////////////////////////////////////////////////
		/// \brief Destructor
		///
		////////////////////////////////////////////////////////////
		~StateMachine();


		////////////////////////////////////////////////////////////
		/// \brief Adds the state to top of stack
		///
		/// \param newState			 State placed in top of stack
		/// \param isReplacing		 Flag instructing on deleting the previous state
		/// For example
		/// isReplacing = true		-> previous state will be deleted
		/// isReplacing = false	-> previous state will NOT be deleted
		///
		////////////////////////////////////////////////////////////
		void AddState(StateRef newState, bool isReplacing = true);

		////////////////////////////////////////////////////////////
		/// \brief Removes the state from top of stack
		/// 
		////////////////////////////////////////////////////////////
		void RemoveState();


		////////////////////////////////////////////////////////////
		/// \brief Changes the state the process
		/// For example, control the operation of removing or adding
		/// a state to the stack
		///
		////////////////////////////////////////////////////////////
		void ProcessStateChange();


		////////////////////////////////////////////////////////////
		/// \brief Get the active state
		///
		////////////////////////////////////////////////////////////
		StateRef& GetActiveState();

	private:

		////////////////////////////////////////////////////////////
		// Member data
		////////////////////////////////////////////////////////////
		std::stack<StateRef> _states;		//Storage container of states
		StateRef _newState;					//Current added state

		bool _isRemoving;					//Flag of deleting of state
		bool _isAdding;						//Flag of adding of state
		bool _isReplacing;					//Priority flag of the added state
	};

} // namespace Engine

#endif // !ENGINE_STATE_MACHINE_HPP


