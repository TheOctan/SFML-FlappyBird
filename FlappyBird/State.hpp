#pragma once

#ifndef ENGINE_STATE_HPP
#define ENGINE_STATE_HPP

namespace Engine
{
	////////////////////////////////////////////////////////////
	/// \brief Base class for all states
	/// Provides the interaction interface with a state
	///
	////////////////////////////////////////////////////////////
	class State
	{
	public:

		////////////////////////////////////////////////////////////
		/// \brief Virtual destructor
		///
		////////////////////////////////////////////////////////////
		virtual ~State() {};

		////////////////////////////////////////////////////////////
		/// \brief Initialize attributes of the state
		///
		////////////////////////////////////////////////////////////
		virtual void Init() = 0;


		////////////////////////////////////////////////////////////
		/// \brief Affects from out to the state
		///
		////////////////////////////////////////////////////////////
		virtual void HandleInput() = 0;

		////////////////////////////////////////////////////////////
		/// \brief Updates logic of state
		///
		/// \param dt		Time interval
		////////////////////////////////////////////////////////////
		virtual void Update(float dt) = 0;

		////////////////////////////////////////////////////////////
		/// \brief Gives a command to a state to draw contents
		///
		/// \param dt		Time interval for smoothing(interpolation)
		////////////////////////////////////////////////////////////
		virtual void Draw(float dt) = 0;


		////////////////////////////////////////////////////////////
		/// \brief Pauses operation of state
		///
		////////////////////////////////////////////////////////////
		virtual void Pause() {}

		////////////////////////////////////////////////////////////
		/// \brief Resumes operation of state
		///
		////////////////////////////////////////////////////////////
		virtual void Resume() {}
	};

} // namespace Engine

#endif // !ENGINE_STATE_HPP
